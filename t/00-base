::::::::::: ./rook0 --evaluate --quiet - ::::::::::::::::::
#t should evaluate to itself
---
#t
---
#t
============
#f should evaluate to itself
---
#f
---
#f
============
(quote) quoted symbols should evaluate to themselves
---
(quote something)
---
something
============
(quote) single quote aliasing ('x) should behave like (quote x)
---
'something
---
something
============
(quote) quoting a list evaluates to the raw list
---
'(a b c)
---
(a b c)
============
(quote) eval should only strip off the outermost quote operator
---
''a
---
(quote a)
============
(atom) numbers should be considered atoms
---
(atom 42)
---
#t
============
(atom) booleans should be considered atoms
---
(atom #f)
---
#t
============
(atom) symbols should be considered atoms
---
(atom 'a)
---
#t
============
(atom) cons cells should not be considered atoms
---
(atom (cons 1 2))
---
#f
============
(eq) should work with numbers
---
(eq 1 1)
---
#t
============
(eq) should handle inequality with numbers
---
(eq 1 2)
---
#f
============
(eq) should work with strings
---
(eq "a" "a")
---
#t
============
(eq) should handle inequality with strings
---
(eq "a" "b")
---
#f
============
(cond) should return the evaluation of the first true condition
---
(cond ((eq 1 0) 'one-eq-zero)
      ((eq 2 2) 'ok)
      (#t       'fall-through))
---
ok
============
(cond) should handle the degenerate case
---
(cond (#t 'ok))
---
ok
============
(cond) should fall through to the default case
---
(cond ((eq 1 0) 'one-eq-zero)
      (#t       'ok))
---
ok
============
(cond) should return the evaluation of the first true condition (order matters!)
---
(cond ((eq 1 0) 'one-eq-zero)
      (#t       'ok)
      ((eq 2 2) 'never-reached))
---
ok
============
(car) the car of (a . b) should be a
---
(car (cons 'a 'b))
---
a
============
(cdr) the cdr of (a . b) should be b
---
(cdr (cons 'a 'b))
---
b
============
