;; rook1 - an interpreted bootstrapping compiler
;;         for the Rook Lisp programming language.
;;
;; author:  James Hunt <james@niftylogic.com>
;; created: 2018-06-07
;;

(let ((*label* 0))
  (functions
    ((bail (error)
       (printf "error: ")
       (printf error)
       (printf "\n")
       (syscall 'exit 1))
     (caar (x) (car (car x)))
     (cadr (x) (car (cdr x)))
     (caddr (x) (car (cdr (cdr x))))
     (cadddr (x) (car (cdr (cdr (cdr x)))))

     (newlabel ()
       (+1 *label*)
       (concat "label" *label*))

     (emit (l)
       (cond ((null l) #t)
             ((eq 'nop (caar l))
              (emit (cdr l)))

             (#t
              (print (car l))
              (emit (cdr l)))))

     (flatten (l)
       (cond ((null l) nil)

             ((atom (car l))
              (cons (car l) (flatten (cdr l))))

             ((atom (caar l))
              (cons (car l) (flatten (cdr l))))

             (#t (append (flatten (car l))
                         (flatten (cdr l))))))

     (gencond (e ift iff)
       (cond ((atom e)
              (gencond (list 'not (list 'eq e 'nil)) ift iff))

             ((eq (car e) 'eq)
              (list
                (geneval 'r1 (cadr e))
                (geneval 'r2 (caddr e))
                (list 'cmp 'r1 'r2)
                (list 'je ift)
                (list 'jmp iff)))

             ((eq (car e) 'not)
              (gencond (cadr e) iff ift))

             ((eq (car e) 'and)
              (let ((lbl (newlabel)))
                (list
                  (gencond (cadr e) lbl iff)
                  lbl
                  (genond (caddr e) ift iff))))

             ((eq (car e) 'or)
              (let ((lbl (newlabel)))
                (list
                  (gencond (cadr e) ift lbl)
                  lbl
                  (gencond (caddr e) ift iff))))

             (#t
               (list
                 (list 'error "unrecognized sub-expression" e)))))

     (geneval (r e)
       (cond ((atom e)
              (list
                (list 'load r e)))

             ((eq (car e) 'if)
              (let ((ift (newlabel))
                    (iff (newlabel))
                    (end (newlabel)))
                (list
                  (gencond (cadr e) ift iff)
                  ift
                  (geneval r (caddr e))
                  (list 'jmp end)
                  iff
                  (geneval r (cadddr e))
                  end
                  (list 'nop))))

             ((eq (car e) 'printf)
                (list
                  (geneval r (cadr e))
                  (list 'printf)))

             (#t
               (list
                 (list 'error "unhandled-toplevel" e)))))

     (main ()
       (cond ((eq (args) 1) #t)
             (#t (bail "USAGE: rook0 rook1.rk <script>")))
       (emit (flatten (geneval 'r1 (read (open (argn 0))))))
       (syscall 'exit 0)))

     (main)))
